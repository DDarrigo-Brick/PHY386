{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ubsuny/PHY386/blob/Homework2025/2025/HW/DDarrigo-Brick/HW1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uucuv7Ms7IGS"
      },
      "source": [
        "## Basic Formatting examples ##\n",
        "Things I want to learn how to do in this class:\n",
        "1. Edit CVSs through python\n",
        "2. Construct plots\n",
        "3. Understand how Github lingo\\learn how to properly use Github\n",
        "4. Learn how to effectively use loops\n",
        "5. Master python syntax\n",
        "\n",
        "### How to include external media ###\n",
        "![A picture of Marie Curie](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Marie_Curie_c._1920s.jpg/440px-Marie_Curie_c._1920s.jpg)\n",
        "\n",
        "A photo of *Marie Curie*, *[Wikipedia](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Marie_Curie_c._1920s.jpg/440px-Marie_Curie_c._1920s.jpg)*\n",
        "\n",
        "*__Dr. Curie__* was a revolutionary figure in the discovery of radiation and its effects, her work helps run reactors and research cites around the world in a very safe manner.\n",
        "\n",
        "She worked in Tandem with her husband who is accredited with Curie's Law:\n",
        "$M=h \\chi H$\n",
        "\n",
        "Data frames and plots galore, Learning code, we ask for more. Each new skill, a joyful quest, Homework fun, we are truly blessed! ðŸ§ª\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b59c1jaj7IGV"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hello World!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v1cpszP88GQ4",
        "outputId": "afc915ff-fa34-459f-ffa4-da82b2a2f365"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num= 002025.00\n",
        "print(\"{:010.3f}\".format(num))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fkExzasx9XFJ",
        "outputId": "14af5843-bcca-4d72-d282-7f94e2f002e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "002025.000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s='I am a string'\n",
        "i= 4\n",
        "f=3.14\n",
        "list1=[s,i,f]\n",
        "print (list1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cXsivfvh-2sc",
        "outputId": "10680534-405e-4e2e-cc24-7c814f41931e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['I am a string', 4, 3.14]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(2+4,\n",
        "  6*2,\n",
        "  3-17,\n",
        "  22/2,\n",
        "  12%4\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pUwg6bGG-5oB",
        "outputId": "fa5a5de9-74fa-4416-8e30-c8a36d81e3df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6 12 -14 11.0 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numbers=[0,1,2,3,4,5,6,7,8,9]\n",
        "count=0\n",
        "for number in numbers:\n",
        "  if number % 2==0:\n",
        "    print(f\"{number} is even\")\n",
        "  else:\n",
        "    number+1\n",
        "    numbers.append (number)\n",
        "    print(f\"{number} was odd and is now even as {number+1}\")\n",
        "  count+=1\n",
        "  if count==10:\n",
        "    break\n",
        "print(\":)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sKUZYNTU_K_C",
        "outputId": "ec07c3ea-31eb-4aa4-918b-66747a2aa8e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 is even\n",
            "1 was odd and is now even as 2\n",
            "2 is even\n",
            "3 was odd and is now even as 4\n",
            "4 is even\n",
            "5 was odd and is now even as 6\n",
            "6 is even\n",
            "7 was odd and is now even as 8\n",
            "8 is even\n",
            "9 was odd and is now even as 10\n",
            ":)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q=24.332\n",
        "\n",
        "T=122+43*Q**2+22*Q\n",
        "\n",
        "print(T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EhxR1qdiB7kz",
        "outputId": "3a77d4d1-f34f-4e9d-9ca4-cc8c11f8de7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "26115.291632000004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "adv_list=[2,2,3,4,5,6,7,3,4,5,6,1,2,7,0,8,7,5,6]\n",
        "num_entires=len(adv_list)\n",
        "\n",
        "average=sum(adv_list)/num_entires\n",
        "\n",
        "print(average)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vVtJzun6CMOB",
        "outputId": "f0315d14-854c-43a3-81b6-9bc24e54e6f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.368421052631579\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fruits = {\n",
        "    \"apple\": \"red\",\n",
        "    \"banana\": \"yellow\",\n",
        "    \"orange\": \"orange\",\n",
        "    \"grape\": \"purple\"\n",
        "}\n",
        "fruits[\"mango\"]=\"... it's complicated\"\n",
        "\n",
        "for fruit,color in fruits.items():\n",
        "  print(f\"The color of {fruit} is {color}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0OeWRe5PC_34",
        "outputId": "13ae3e6e-baa1-46e0-ff71-2728d4468c0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The color of apple is red\n",
            "The color of banana is yellow\n",
            "The color of orange is orange\n",
            "The color of grape is purple\n",
            "The color of mango is ... it's complicated\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prompt the user for input\n",
        "user_input = input(\"Enter some text to write to the file: \")\n",
        "\n",
        "# Write the user input to a file\n",
        "with open(\"user_input.txt\", \"w\") as file:\n",
        "    file.write(user_input)\n",
        "\n",
        "# Read back the contents of the file\n",
        "with open(\"user_input.txt\", \"r\") as file:\n",
        "    content = file.read()\n",
        "\n",
        "# Print the contents of the file\n",
        "print(\"Tahnk you, your data has been recorded as:\")\n",
        "print(content)\n",
        "print(\"Have a pleasant day! :)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DDVd7BzDEhxp",
        "outputId": "343366c6-28ea-4744-ddbb-9bf83392cf12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter some text to write to the file: AAAAA\n",
            "Tahnk you, your data has been recorded as:\n",
            "AAAAA\n",
            "Have a pleasant day! :)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GWRqzx1IE37A"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}